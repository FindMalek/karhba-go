generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserType {
  AGENCY
  CLIENT
}

enum ContactType {
  PHONE
  EMAIL
  FACEBOOK
  INSTAGRAM
  WEBSITE
  WHATSAPP
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  POST_PAYMENT
  D17
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BookingStatus {
  BOOKED
  COMPLETED
  CANCELED
}

enum VehicleType {
  SEDAN
  SUV
  HATCHBACK
  COUPE
  CONVERTIBLE
  MINIVAN
  TRUCK
  VAN
  OTHER
}

enum AvailabilityStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
  UNAVAILABLE
  OTHER
}

model Account {
  userId String

  type              String
  provider          String
  providerAccountId String

  refresh_token String?
  access_token  String?
  expires_at    Int?

  token_type String?
  scope      String?
  id_token   String?

  session_state String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expires   DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model User {
  id String @id @default(cuid())

  name       String
  image      String  @default("https://karhba-go.findmalek.com/placeholder.svg")
  email      String  @unique
  phone      String? @unique

  verified      Boolean   @default(false)
  emailVerified DateTime? @map("email_verified")

  type   UserType @default(CLIENT)
  agency Agency[]
  client Client[]

  accounts Account[]
  sessions Session[]

  Authenticator Authenticator[]

  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model VerificationToken {
  token String @unique

  identifier String
  expires    DateTime

  passCode        String?
  verificationUrl String?

  @@id([identifier, token])
}

model Authenticator {
  credentialID String @unique

  providerAccountId    String
  credentialPublicKey  String
  credentialDeviceType String
  transports           String?

  counter            Int
  credentialBackedUp Boolean

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ContactDetail {
  id String @id @default(cuid())

  value String
  type  ContactType

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Agency {
  id String @id @default(cuid())

  name     String
  bio      String?
  address  String
  location String

  vehicles       Vehicle[]
  rentalTerms    RentalTerm[]
  reviews        Review[]
  contactDetails ContactDetail[]
  Booking        Booking[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now()) @db.Timestamp(6)
}

model Client {
  id String @id @default(cuid())

  phone String?
  bio   String?

  bookings Booking[]
  reviews  Review[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now()) @db.Timestamp(6)
}

model Vehicle {
  id          String  @id @default(cuid())
  price       Float
  description String?

  make         String
  model        String
  year         Int?
  mileage      Int?
  transmission String?

  category VehicleType

  fuelType   String?
  kmPerLitre Float?

  numSeats Int?
  numDoors Int?

  features String[]
  extras   String[]

  maxRentalDays Int?
  minRentalDays Int? @default(1)

  extraChargePerKm       Float?
  mileageAllowancePerDay Int?

  bookings            Booking[]
  vehicleAvailability VehicleAvailability[]

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id])

  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now()) @db.Timestamp(6)
}

model VehicleAvailability {
  id     String              @id @default(cuid())
  status AvailabilityStatus?

  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now()) @db.Timestamp(6)

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}

model FrequentlyAskedQuestions {
  id String @id @default(cuid())

  question String
  answer   String

  rentalTermId String?
  RentalTerm   RentalTerm? @relation(fields: [rentalTermId], references: [id])
}

// RentalTerm Model
model RentalTerm {
  id String @id @default(cuid())

  minRentalPeriod   Int
  ageRequirement    Int
  insuranceCoverage String

  deposit         Int     @default(0)
  depositRequired Boolean

  guidlines String[]
  faqs      FrequentlyAskedQuestions[]

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(6)
}

// Booking Model
model Booking {
  id     String        @id @default(cuid())
  status BookingStatus

  kilometersUsed    Int?
  totalCost         Float
  insuranceCoverage String?
  pickUpLocation    String
  depositRequired   Boolean

  payments Payment[]

  clientId  String
  client    Client  @relation(fields: [clientId], references: [id])
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  agencyId  String
  agency    Agency  @relation(fields: [agencyId], references: [id])

  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Payment {
  id     String @id @default(cuid())
  amount Float

  reference String?
  method    PaymentMethod
  status    PaymentStatus?

  paymentDate DateTime
  createdAt   DateTime @default(now()) @db.Timestamp(6)

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])
}

model Review {
  id String @id @default(cuid())

  rating Int
  review String?

  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id])
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Waitlist {
  id        String   @id @default(cuid())
  
  email     String   @unique
  country   String

  createdAt DateTime @default(now())

}